generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Compte {
  id                 Int            @id @default(autoincrement())
  login              String         @unique
  role               Role           @default(CLIENT)
  firstName          String
  lastName           String
  phone              String         @unique
  CNI                String
  photo              String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  status             Etat           @default(INACTIVE)
  secretCode         String
  password           String
  lastLoginAt        DateTime?
  qrCodeUrl          String?
  lastActivityAt     DateTime?      @default(now())
  loginAttempt       Boolean        @default(false)
  UserSession        UserSession[]
  admin              Admin?
  agent              Agent?
  client             Client?
  notifications      Notification[]
  operateur          Operateur?
  payments           Payment[]
  porteFeuille       PorteFeuille?
  service            Service?
  superadmin         SuperAdmin?
  transactions       Transaction[]
  receivedTransferts Transfert[]    @relation("ReceivedTransferts")
  sentTransferts     Transfert[]    @relation("SentTransferts")

  @@map("comptes")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  compteId  Int      @unique
  email     String
  createdAt DateTime @default(now())
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("superadmins")
}

model Admin {
  id        Int      @id @default(autoincrement())
  compteId  Int      @unique
  email     String
  createdAt DateTime @default(now())
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("admins")
}

model Client {
  id           Int      @id @default(autoincrement())
  compteId     Int      @unique
  createdAt    DateTime @default(now())
  isFirstLogin Boolean  @default(true)
  compte       Compte   @relation(fields: [compteId], references: [id])

  @@map("clients")
}

model Service {
  id         Int      @id @default(autoincrement())
  compteId   Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  nomService String
  compte     Compte   @relation(fields: [compteId], references: [id])

  @@map("services")
}

model Operateur {
  id           Int       @id @default(autoincrement())
  compteId     Int       @unique
  nomOperateur String
  createdAt    DateTime  @default(now())
  compte       Compte    @relation(fields: [compteId], references: [id])
  payments     Payment[]

  @@map("operateurs")
}

model Agent {
  id               Int           @id @default(autoincrement())
  compteId         Int           @unique
  adresse          String
  nomAgence        String
  registreCommerce String
  ninea            String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  commissionRate   Float         @default(0.05)
  compte           Compte        @relation(fields: [compteId], references: [id])
  transactions     Transaction[]

  @@map("agents")
}

model Transfert {
  id         Int             @id @default(autoincrement())
  amount     Float
  frais      Float
  status     TransfertStatus @default(PENDING)
  senderId   Int
  receiverId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  receiver   Compte          @relation("ReceivedTransferts", fields: [receiverId], references: [id])
  sender     Compte          @relation("SentTransferts", fields: [senderId], references: [id])

  @@map("transferts")
}

model Transaction {
  id             Int               @id @default(autoincrement())
  amount         Float
  type           TransactionType
  status         TransactionStatus @default(SUCCESS)
  compteId       Int
  agentId        Int
  porteFeuilleId Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  agent          Agent             @relation(fields: [agentId], references: [id])
  compte         Compte            @relation(fields: [compteId], references: [id])
  porteFeuille   PorteFeuille      @relation(fields: [porteFeuilleId], references: [id])

  @@map("transactions")
}

model PorteFeuille {
  id             Int           @id @default(autoincrement())
  balance        Float         @default(0)
  devise         String        @default("XOF")
  compteId       Int           @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isActive       Boolean       @default(false)
  montantPlafond Float
  activations    Activation[]
  compte         Compte        @relation(fields: [compteId], references: [id])
  transactions   Transaction[]

  @@map("portefeuilles")
}

model Payment {
  id          Int           @id @default(autoincrement())
  amount      Float
  status      PaymentStatus @default(SUCCESS)
  compteId    Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  operateurId Int
  compte      Compte        @relation(fields: [compteId], references: [id])
  operateur   Operateur     @relation(fields: [operateurId], references: [id])

  @@map("payments")
}

model Activation {
  id             Int          @id @default(autoincrement())
  code           String
  porteFeuilleId Int
  expiration     Boolean      @default(false)
  isActive       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  porteFeuille   PorteFeuille @relation(fields: [porteFeuilleId], references: [id])

  @@map("activations")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  type      String   @default("GENERAL")
  isRead    Boolean  @default(false)
  compteId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("notifications")
}

model TemporaryCode {
  id        Int      @id @default(autoincrement())
  code      String
  phone     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model UserSession {
  id          Int      @id @default(autoincrement())
  compteId    Int
  sessionType String
  lastActive  DateTime
  expiresAt   DateTime
  comptes     Compte   @relation(fields: [compteId], references: [id])
}

enum Role {
  CLIENT
  ADMIN
  SUPERADMIN
  AGENT
  SERVICE
  OPERATEUR
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  PAYMENT
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}

enum Etat {
  ACTIVE
  INACTIVE
}

enum TransfertStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model BlackListToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@map("blacklist_tokens")
}