generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  SUPERADMIN
  AGENT
  SERVICE
  OPERATEUR
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  PAYMENT
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}

enum Etat {
  ACTIVE
  INACTIVE
}

enum TransfertStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

model Compte {
  id          Int      @id @default(autoincrement())
  login       String   @unique
  password    String
  role        Role     @default(CLIENT)
  firstName   String 
  lastName    String
  phone       String   @unique
  CNI         String   
  status      Etat     @default(INACTIVE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sentTransferts     Transfert[] @relation("SentTransferts")
  receivedTransferts Transfert[] @relation("ReceivedTransferts")
  notifications      Notification[]
  payments           Payment[]
  transactions       Transaction[]
  
  // One-to-One relations
  superadmin    SuperAdmin?
  admin         Admin?
  agent         Agent?
  client        Client?
  operateur     Operateur?
  service       Service?
  porteFeuille  PorteFeuille?

  @@map("comptes")
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  compteId  Int      @unique  // Added @unique
  email     String
  photo     String
  createdAt DateTime @default(now())

  // Relations
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("superadmins")
}

model Admin {
  id        Int      @id @default(autoincrement())
  compteId  Int      @unique
  email     String
  photo     String
  createdAt DateTime @default(now())

  // Relations
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("admins")
}

model Client {
  id        Int      @id @default(autoincrement())
  compteId  Int      @unique  // Added @unique
  photo     String
  createdAt DateTime @default(now())

  // Relations
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("clients")
}

model Service {
  id          Int      @id @default(autoincrement())
  compteId    Int      @unique  // Added @unique
  nomService  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  compte      Compte   @relation(fields: [compteId], references: [id])

  @@map("services")
}

model Operateur {
  id           Int       @id @default(autoincrement())
  compteId     Int       @unique  // Added @unique
  nomOperateur String
  photo        String
  createdAt    DateTime  @default(now())
  payments     Payment[]  // Added missing relation

  // Relations
  compte       Compte    @relation(fields: [compteId], references: [id])

  @@map("operateurs")
}

model Agent {
  id               Int           @id @default(autoincrement())
  compteId         Int          @unique  // Added @unique
  adresse          String
  nomAgence        String
  registreCommerce String
  ninea            String
  commissionRate   Float         @default(0.05)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  compte           Compte        @relation(fields: [compteId], references: [id])
  transactions     Transaction[]

  @@map("agents")
}

model Transfert {
  id         Int            @id @default(autoincrement())
  amount     Float
  frais      Float
  status     TransfertStatus @default(PENDING)
  senderId   Int
  receiverId Int
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // Relations
  sender     Compte         @relation("SentTransferts", fields: [senderId], references: [id])
  receiver   Compte         @relation("ReceivedTransferts", fields: [receiverId], references: [id])

  @@map("transferts")
}

model Transaction {
  id             Int               @id @default(autoincrement())
  amount         Float
  type           TransactionType
  status         TransactionStatus @default(SUCCESS)
  compteId       Int
  agentId        Int
  porteFeuilleId Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relations
  compte         Compte           @relation(fields: [compteId], references: [id])
  agent          Agent            @relation(fields: [agentId], references: [id])
  porteFeuille   PorteFeuille     @relation(fields: [porteFeuilleId], references: [id])

  @@map("transactions")
}

model PorteFeuille {
  id             Int           @id @default(autoincrement())
  balance        Float         @default(0)
  devise         String        @default("XOF")
  montantPlafond Float
  isActive       Boolean       @default(false)
  compteId       Int          @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  compte         Compte        @relation(fields: [compteId], references: [id])
  activations    Activation[]
  transactions   Transaction[]

  @@map("portefeuilles")
}

model Payment {
  id          Int           @id @default(autoincrement())
  amount      Float
  status      PaymentStatus @default(SUCCESS)
  compteId    Int
  operateurId Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  compte      Compte        @relation(fields: [compteId], references: [id])
  operateur   Operateur     @relation(fields: [operateurId], references: [id])

  @@map("payments")
}

model Activation {
  id             Int          @id @default(autoincrement())
  code           String
  porteFeuilleId Int
  expiration     Boolean      @default(false)
  isActive       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  porteFeuille   PorteFeuille @relation(fields: [porteFeuilleId], references: [id])

  @@map("activations")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  type      String   @default("GENERAL") // Ajout du type
  isRead    Boolean  @default(false)
  compteId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  compte    Compte   @relation(fields: [compteId], references: [id])

  @@map("notifications")
}